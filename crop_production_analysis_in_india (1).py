# -*- coding: utf-8 -*-
"""crop production analysis in India.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ePhNxRuNNYcIItBnNMMfNAEvn-MPtfwa
"""

from google.colab import drive

drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('/content/drive/MyDrive/Crop Production data.csv')
df.head(5)

df.shape

df.describe()

df.isnull().sum()

"""I'll impute the median of Production, which is a justified approach due to the low percentage of missing values, it considers available information, preserves distribution characteristics, minimizes bias, and is simple to implement."""

production_median = df['Production'].median()
df['Production'].fillna(production_median, inplace=True)

df.isnull().sum()

"""**Discover and Visualize the Data to Gain Insights**

"""

df.columns

cat = ['State_Name', 'District_Name', 'Crop', 'Season']
num = ['Crop_Year' ,'Area', 'Production']

"""creating countplots to visualize the frequency distribution of each categorical variable. This will give us an overview of the distribution of categories and help identify the most common categories."""

import plotly.express as px
for att in cat:
    fig = px.histogram(df, x=att, title=att,color=att)
    fig.update_layout(xaxis_title=None, yaxis_title='Count',showlegend=False)
    fig.show()



"""let's also visualizing the district counts by state, it will give us an overview of how the districts are distributed across different states. This can help us identify states with a higher number of districts and states with fewer districts"""

state_counts = df.groupby('State_Name')['District_Name'].nunique().reset_index()
fig = px.bar(state_counts, x='State_Name', y='District_Name', color='State_Name',
             title='District Counts by State', labels={'State': 'State', 'District': 'District Count'})
fig.update_layout(showlegend=False)
fig.show()

"""Now let's visualize the distributions of numerical attributes using histograms and box plots."""

for att in num:
    fig = px.histogram(df, x=att)
    fig.update_layout(title=att, title_font_size=20)
    fig.update_layout(height=400, showlegend=False, xaxis_title='')
    fig.show()
    fig = px.box(df, x=att, orientation='h')
    fig.update_layout(height=400, showlegend=False, xaxis_title='')
    fig.show()

"""The numerical attributes in the dataset exhibit a high degree of skewness and contain outliers, indicating non-normal distribution and the presence of extreme values. Additionally, when examining the Crop_Year variable, it is observed that there is a limited number of data points available for the year 2020.

** The most commonly grown crops in each state**
"""

crop_counts = df.groupby(['State_Name', 'Crop']).size().reset_index(name='Count')
most_common_crop = crop_counts.groupby('State_Name').apply(lambda x: x.loc[x['Count'].idxmax()]).reset_index(drop=True)
most_common_crop

# @title Count

from matplotlib import pyplot as plt
most_common_crop['Count'].plot(kind='hist', bins=20, title='Count')
plt.gca().spines[['top', 'right',]].set_visible(False)

"""**the highest crop production by season**"""

season_production = df.groupby(['Crop', 'Season'])['Production'].sum().reset_index()

season_list =season_production.Season.unique()

# Filter the data for the winter season
for i in season_list:
  mask =season_production[season_production.Season == i]
  mask=mask.sort_values('Production', ascending=False)
  top_crops = mask.head(10)
  fig = px.bar(top_crops, x='Crop', y='Production', title= 'Highest Crop Production in {}'.format(i))
  fig.show()

"""**specific crops that consistently perform well across different seasons**

**State has the most production throughout the whole year**
"""

state_production = df.groupby(['State_Name','Season'])['Production'].sum().reset_index()
state_production

"""**The distribution of crop production across different seasons**"""

crop_seasons = df[df['Season'] != 'Whole Year ']
season_production = crop_seasons.groupby('Season')['Production'].sum().reset_index()
fig = px.pie(season_production, values='Production', names='Season', title='Percentage of Production for Crops in Each Season')
fig.show()

"""**The production changed in each state over the years**"""

state_production_per_year = df.groupby(['State_Name', 'Crop_Year'])['Production'].sum().reset_index()
state_production_per_year = state_production_per_year.sort_values('Crop_Year')

fig = px.line(state_production_per_year, x='Crop_Year', y='Production', color='State_Name',
              title='Production Changes in Each State Over the Years')
fig.show()

"""**year has the highest overall production**"""

yearly_production = df.groupby('Crop_Year')['Production'].sum().reset_index()
max_production_year = yearly_production.loc[yearly_production['Production'].idxmax(), 'Crop_Year']
fig = px.bar(yearly_production, x='Crop_Year', y='Production',
             title='Overall Production by Year')
fig.update_layout(xaxis_title='Year', yaxis_title='Production')
fig.add_annotation(x=max_production_year, y=yearly_production['Production'].max(),
                   text='Max Production Year', showarrow=True, arrowhead=1)
fig.show()

"""**Conclusion**
This project provides valuable insights into crop production patterns and trends. By exploring and visualizing the data, we have gained a better understanding of the most commonly grown crops, the distribution of crop production across seasons and states, and the highest production in different years. These insights can be utilized for decision-making, resource allocation, and future planning in the agricultural sector. Additionally, the project highlights the importance of data exploration, visualization, and analytical techniques in understanding and utilizing agricultural data effectively.
"""